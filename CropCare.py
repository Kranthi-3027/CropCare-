# -------------------------------------------------
# Single-Sector (Agriculture) Document Analysis App - CropCare
# -------------------------------------------------
import os, io, re, time, html, hashlib, base64
from dotenv import load_dotenv
load_dotenv()

import streamlit as st
import PyPDF2, docx
from PIL import Image
from langdetect import detect
import google.generativeai as genai
from gtts import gTTS

# -------------------------------------------------
# API / Models
# -------------------------------------------------
API_KEY = os.getenv("GEMINI_API_KEY", "")
genai.configure(api_key=API_KEY)
MODEL_NAME = "gemini-2.5-flash-lite"
model = genai.GenerativeModel(MODEL_NAME)
vision_model = genai.GenerativeModel(MODEL_NAME)

# -------------------------------------------------
# App Config
# -------------------------------------------------
st.set_page_config(
    page_title="CropCare",
    page_icon="ЁЯМ╛",
    layout="wide"
)

# -------------------------------------------------
# State Defaults
# -------------------------------------------------
DEFAULT_STATE = {
    "language_selected": False,
    "sector_selected": False,
    "selected_language": "",
    "selected_sector": "Agriculture",
    "doc_text": "",
    "summary": "",
    "chat_history": [],
    "general_messages": [],
    "_render_flag": False
}
for k, v in DEFAULT_STATE.items():
    st.session_state.setdefault(k, v)

# -------------------------------------------------
# Languages / Sectors (Simplified)
# -------------------------------------------------
LANGUAGES = {
    "English": "ЁЯЗ║ЁЯЗ╕",
    "рд╣рд┐рдВрджреА": "ЁЯЗоЁЯЗ│",
    "р░др▒Жр░▓р▒Бр░Чр▒Б": "ЁЯЗоЁЯЗ│",
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": "ЁЯЗоЁЯЗ│"
}

LANG_CODE_MAP_TTS = {
    "English": "en", "рд╣рд┐рдВрджреА": "hi", "р░др▒Жр░▓р▒Бр░Чр▒Б": "te", "р┤ор┤▓р┤пр┤╛р┤│р┤В": "ml"
}

SECTOR_LABELS = {
    "English":     {"Agriculture": "Agriculture"},
    "рд╣рд┐рдВрджреА":       {"Agriculture": "рдХреГрд╖рд┐"},
    "р░др▒Жр░▓р▒Бр░Чр▒Б":      {"Agriculture": "р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В"},
    "р┤ор┤▓р┤пр┤╛р┤│р┤В":     {"Agriculture": "р┤Хр╡Гр┤╖р┤┐"},
}

def sector_label(name: str) -> str:
    lang = st.session_state.get("selected_language", "English")
    return SECTOR_LABELS.get(lang, SECTOR_LABELS["English"]).get(name, name)

# -------------------------------------------------
# UI Translations
# -------------------------------------------------
UI_TRANSLATIONS = {
    "English": {
        "select_language": "ЁЯМН Select Your Language",
        "choose_language": "Choose your preferred language to continue",
        "selected_language": "Selected Language",
        "back_language": "тЖР Back to Language Selection",
        "settings": "тЪЩя╕П Settings",
        "change_lang_sector": "ЁЯФД Change Language",
        "current": "Current",
        "uploader_any": "Upload ANY file type (ЁЯУД Documents + ЁЯЦ╝я╕П Images)",
        "sample_doc_btn": "ЁЯУЭ Load sample {sector} document",
        "sample_try": "Try sample data if there is no file ready",
        "extracting": "Extracting textтАж",
        "generating": "Generating analysisтАж",
        "thinking": "Thinking...",
        "no_text": "No readable text found in the uploaded file.",
        "analyzing_image": "ЁЯФН Analyzing image...",
        "image_analysis_header": "ЁЯЦ╝я╕П Image Analysis",
        "uploaded_image_caption": "Uploaded {sector} Image",
        "extracting_image_text": "Extracting text from image...",
        "enhanced_title_suffix": " тАУ Enhanced AI Analysis",
        "info_agri": "ЁЯМН Language: {lang_flag} {lang} | ЁЯМ╛ Sector: Agricultural Analysis + Crop Image Recognition",
        "tab_doc": "ЁЯУД Enhanced {sector} Analysis",
        "tab_gen": "ЁЯзн General {sector} Help",
        "enhanced_analysis_header": "ЁЯУК Enhanced {sector} Analysis",
        "chat_about_analysis": "ЁЯТм Ask Questions About This Analysis",
        "chat_placeholder": "Ask any question about this analysis...",
        "examples_try": "Try asking:",
        "gen_help_header": "ЁЯзн General {sector} Help & Consultation",
        "gen_help_caption": "Ask any {sector_lower}-related questions тАФ here to help!",
        "gen_chat_placeholder": "Ask any {sector_lower} question...",
        "examples_caption": "Example questions:",
        "enhanced_features_title": "ЁЯЪА Features:",
        "features_agri_1": "ЁЯМ▒ Crop disease detection",
        "features_agri_2": "ЁЯРЫ Pest identification",
        "features_agri_3": "ЁЯУК Soil analysis from images",
        "disclaimer_block_header": "тЪая╕П Disclaimer:",
        "disclaimer_agri": "- Agricultural: Recommendations are generalтАФconsider local conditions",
        "disclaimer_footer": "- Always verify critical information with qualified professionals",
        "document": "Document",
        "analysis_summary": "ЁЯУС Analysis Summary"
    },
    "рд╣рд┐рдВрджреА": {
        "select_language": "ЁЯМН рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_language": "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "selected_language": "рдЪрдпрдирд┐рдд рднрд╛рд╖рд╛",
        "back_language": "тЖР рднрд╛рд╖рд╛ рдЪрдпрди рдкрд░ рд╡рд╛рдкрд╕",
        "settings": "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "change_lang_sector": "ЁЯФД рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ",
        "current": "рд╡рд░реНрддрдорд╛рди",
        "uploader_any": "рдХрд┐рд╕реА рднреА рдлрд╝рд╛рдЗрд▓ рдкреНрд░рдХрд╛рд░ рдХреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (ЁЯУД рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ + ЁЯЦ╝я╕П рдЫрд╡рд┐рдпрд╛рдБ)",
        "sample_doc_btn": "ЁЯУЭ рдирдореВрдирд╛ {sector} рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд▓реЛрдб рдХрд░реЗрдВ",
        "sample_try": "рдпрджрд┐ рдлрд╝рд╛рдЗрд▓ рддреИрдпрд╛рд░ рдирд╣реАрдВ рд╣реИ рддреЛ рдирдореВрдирд╛ рдЖрдЬрд╝рдорд╛рдПрдБ",
        "extracting": "рдкрд╛рда рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "generating": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдмрдирд╛рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "thinking": "рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ...",
        "no_text": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдкрдврд╝рдиреЗ рдпреЛрдЧреНрдп рдкрд╛рда рдирд╣реАрдВ рдорд┐рд▓рд╛ред",
        "analyzing_image": "ЁЯФН рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
        "image_analysis_header": "ЁЯЦ╝я╕П рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "uploaded_image_caption": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ {sector} рдЫрд╡рд┐",
        "extracting_image_text": "рдЫрд╡рд┐ рд╕реЗ рдкрд╛рда рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...",
        "enhanced_title_suffix": " тАУ рдЙрдиреНрдирдд AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "info_agri": "ЁЯМН рднрд╛рд╖рд╛: {lang_flag} {lang} | ЁЯМ╛ рдХреНрд╖реЗрддреНрд░: рдХреГрд╖рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг + рдлрд╕рд▓ рдЫрд╡рд┐ рдкрд╣рдЪрд╛рди",
        "tab_doc": "ЁЯУД рдЙрдиреНрдирдд {sector} рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "tab_gen": "ЁЯзн рд╕рд╛рдорд╛рдиреНрдп {sector} рд╕рд╣рд╛рдпрддрд╛",
        "enhanced_analysis_header": "ЁЯУК рдЙрдиреНрдирдд {sector} рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "chat_about_analysis": "ЁЯТм рдЗрд╕ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "chat_placeholder": "рдЗрд╕ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рднреА рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ...",
        "examples_try": "рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдкреВрдЫрдиреЗ рдХреА:",
        "gen_help_header": "ЁЯзн рд╕рд╛рдорд╛рдиреНрдп {sector} рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рдкрд░рд╛рдорд░реНрд╢",
        "gen_help_caption": "рдХрд┐рд╕реА рднреА {sector_lower}-рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ тАФ рдорджрдж рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░!",
        "gen_chat_placeholder": "рдХреЛрдИ рднреА {sector_lower} рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ...",
        "examples_caption": "рдЙрджрд╛рд╣рд░рдг рдкреНрд░рд╢реНрди:",
        "enhanced_features_title": "ЁЯЪА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ:",
        "features_agri_1": "ЁЯМ▒ рдлрд╕рд▓ рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
        "features_agri_2": "ЁЯРЫ рдХреАрдЯ рдкрд╣рдЪрд╛рди",
        "features_agri_3": "ЁЯУК рдЫрд╡рд┐рдпреЛрдВ рд╕реЗ рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "disclaimer_block_header": "тЪая╕ПрдЕрд╕реНрд╡реАрдХрд░рдг:",
        "disclaimer_agri": "- рдХреГрд╖рд┐: рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рд╕рд╛рдорд╛рдиреНрдп рд╣реИрдВтАФрд╕реНрдерд╛рдиреАрдп рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ",
        "disclaimer_footer": "- рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЬрд╛рдирдХрд╛рд░реА рдХреЛ рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ",
        "document": "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝",
        "analysis_summary": "ЁЯУС рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕рд╛рд░рд╛рдВрд╢"
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б": {
        "select_language": "ЁЯМН р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_language": "р░Хр▒Кр░ир░╕р░╛р░Чр▒Зр░Вр░жр▒Бр░Хр▒Б р░ор▒Ар░Хр▒Б р░ир░Ър▒Нр░Ър░┐р░и р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "selected_language": "р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░нр░╛р░╖",
        "back_language": "тЖР р░нр░╛р░╖ р░Ор░Вр░кр░┐р░Хр░Хр▒Б р░╡р▒Жр░ир░Хр▒Нр░Хр░┐",
        "settings": "тЪЩя╕П р░Ер░ор░░р░┐р░Хр░▓р▒Б",
        "change_lang_sector": "ЁЯФД р░нр░╛р░╖ р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐",
        "current": "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░ор▒Б",
        "uploader_any": "р░П р░лр▒Ир░▓р▒Н р░░р░Хр░ор▒Ир░ир░╛ р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ (ЁЯУД р░кр░др▒Нр░░р░╛р░▓р▒Б + ЁЯЦ╝я╕П р░Ър░┐р░др▒Нр░░р░╛р░▓р▒Б)",
        "sample_doc_btn": "ЁЯУЭ р░ир░ор▒Вр░ир░╛ {sector} р░кр░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "sample_try": "р░лр▒Ир░│р▒Нр░▓р▒Б р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░▓р▒Зр░Хр░кр▒Лр░др▒З р░ир░ор▒Вр░ир░╛ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐",
        "extracting": "р░кр░╛р░ар▒Нр░пр░╛р░ир▒Нр░ир░┐ р░╡р▒Жр░▓р░┐р░Хр░┐р░др▒Ар░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "generating": "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░гр░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "thinking": "р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б...",
        "no_text": "р░И р░лр▒Ир░▓р▒НтАМр░▓р▒Л р░Ър░жр░╡р░Чр░▓р░┐р░Чр▒З р░кр░╛р░ар▒Нр░пр░В р░Хр░ир░┐р░кр░┐р░Вр░Ър░▓р▒Зр░жр▒Б.",
        "analyzing_image": "ЁЯФН р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...",
        "image_analysis_header": "ЁЯЦ╝я╕П р░Ър░┐р░др▒Нр░░р░В р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "uploaded_image_caption": "р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и {sector} р░Ър░┐р░др▒Нр░░р░В",
        "extracting_image_text": "р░Ър░┐р░др▒Нр░░р░В р░ир▒Бр░Вр░бр░┐ р░кр░╛р░ар▒Нр░пр░╛р░ир▒Нр░ир░┐ р░╡р▒Жр░▓р░┐р░Хр░┐р░др▒Ар░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...",
        "enhanced_title_suffix": " тАУ р░Ер░зр▒Бр░ир░╛р░др░и AI р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "info_agri": "ЁЯМН р░нр░╛р░╖: {lang_flag} {lang} | ЁЯМ╛ р░╡р░┐р░нр░╛р░Чр░В: р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г + р░кр░Вр░Я р░Ър░┐р░др▒Нр░░р░В р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "tab_doc": "ЁЯУД р░Ер░зр▒Бр░ир░╛р░др░и {sector} р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "tab_gen": "ЁЯзн р░╕р░╛р░зр░╛р░░р░г {sector} р░╕р░╣р░╛р░пр░В",
        "enhanced_analysis_header": "ЁЯУК р░Ер░зр▒Бр░ир░╛р░др░и {sector} р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "chat_about_analysis": "ЁЯТм р░И р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐",
        "chat_placeholder": "р░И р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░жр▒Ир░ир░╛ р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐...",
        "examples_try": "р░Зр░▓р░╛ р░Ер░бр░Чр░Вр░бр░┐:",
        "gen_help_header": "ЁЯзн р░╕р░╛р░зр░╛р░░р░г {sector} р░╕р░╣р░╛р░пр░В & р░╕р░▓р░╣р░╛",
        "gen_help_caption": "р░Пр░жр▒Ир░ир░╛ {sector_lower} р░╕р░Вр░мр░Вр░зр░┐р░д р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐ тАФ р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░ор▒Б!",
        "gen_chat_placeholder": "р░Пр░жр▒Ир░ир░╛ {sector_lower} р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐...",
        "examples_caption": "р░Йр░жр░╛р░╣р░░р░г р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б:",
        "enhanced_features_title": "ЁЯЪА р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б:",
        "features_agri_1": "ЁЯМ▒ р░кр░Вр░Я р░░р▒Лр░Чр░╛р░▓ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "features_agri_2": "ЁЯРЫ р░Хр▒Ар░Яр░Хр░╛р░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░В",
        "features_agri_3": "ЁЯУК р░Ър░┐р░др▒Нр░░р░╛р░▓ р░ир▒Бр░Вр░бр░┐ р░ор░Яр▒Нр░Яр░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "disclaimer_block_header": "тЪая╕П р░Чр░ор░ир░┐р░Х:",
        "disclaimer_agri": "- р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В: р░╕р░┐р░лр░╛р░░р░╕р▒Бр░▓р▒Б р░╕р░╛р░зр░╛р░░р░гр░В тАФ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р░ир▒Б р░кр░░р░┐р░Чр░гр░┐р░Вр░Ър░Вр░бр░┐",
        "disclaimer_footer": "- р░ор▒Бр░Цр▒Нр░п р░╕р░ор░╛р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Ер░░р▒Нр░╣р▒Бр░▓р▒Ир░и р░ир░┐р░кр▒Бр░гр▒Бр░▓р░др▒Л р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
        "document": "р░кр░др▒Нр░░р░В",
        "analysis_summary": "ЁЯУС р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╕р░╛р░░р░╛р░Вр░╢р░В"
    },
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": {
        "select_language": "ЁЯМН р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "choose_language": "р┤др╡Бр┤Яр┤░р┤╛р╡╗ р┤Зр┤╖р╡Нр┤Яр┤ор╡Бр┤│р╡Нр┤│ р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "selected_language": "р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤др╡Нр┤д р┤нр┤╛р┤╖",
        "back_language": "тЖР р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤ор┤Яр┤Щр╡Нр┤Щр╡Бр┤Х",
        "settings": "тЪЩя╕П р┤Хр╡Нр┤░р┤ор╡Ар┤Хр┤░р┤гр┤Щр╡Нр┤Щр╡╛",
        "change_lang_sector": "ЁЯФД р┤нр┤╛р┤╖ р┤ор┤╛р┤▒р╡Нр┤▒р╡Бр┤Х",
        "current": "р┤ир┤┐р┤▓р┤╡р┤┐р╡╜",
        "uploader_any": "р┤Пр┤др╡Н р┤лр┤пр╡╜ р┤др┤░р┤В р┤╡р╡Зр┤гр┤ор╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х (ЁЯУД р┤░р╡Зр┤Цр┤Хр╡╛ + ЁЯЦ╝я╕П р┤Ър┤┐р┤др╡Нр┤░р┤Щр╡Нр┤Щр╡╛)",
        "sample_doc_btn": "ЁЯУЭ р┤╕р┤╛р┤ор╡Нр┤кр┤┐р╡╛ {sector} р┤░р╡Зр┤Ц р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        "sample_try": "р┤лр┤пр╡╜ р┤Зр┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤╕р┤╛р┤ор╡Нр┤кр┤┐р╡╛ р┤кр┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "extracting": "р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ор┤Яр╡Бр┤др╡Нр┤др╡Бр┤Хр╡Кр┤гр╡Нр┤Яр┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡БтАж",
        "generating": "р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡БтАж",
        "thinking": "р┤Ър┤┐р┤ир╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
        "no_text": "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д р┤лр┤пр┤▓р┤┐р╡╜ р┤╡р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤кр┤▒р╡Нр┤▒р╡Бр┤ир╡Нр┤и р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир┤╛р┤пр┤┐р┤▓р╡Нр┤▓.",
        "analyzing_image": "ЁЯФН р┤Ър┤┐р┤др╡Нр┤░р┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
        "image_analysis_header": "ЁЯЦ╝я╕П р┤Ър┤┐р┤др╡Нр┤░р┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "uploaded_image_caption": "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д {sector} р┤Ър┤┐р┤др╡Нр┤░р┤В",
        "extracting_image_text": "р┤Ър┤┐р┤др╡Нр┤░р┤др╡Нр┤др┤┐р╡╜ р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ор┤Яр╡Бр┤др╡Нр┤др╡Бр┤Хр╡Кр┤гр╡Нр┤Яр┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
        "enhanced_title_suffix": " тАУ р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤ор╡Бр┤│р╡Нр┤│ AI р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "info_agri": "ЁЯМН р┤нр┤╛р┤╖: {lang_flag} {lang} | ЁЯМ╛ р┤╡р┤┐р┤нр┤╛р┤Чр┤В: р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В + р┤╡р┤┐р┤│ р┤Ър┤┐р┤др╡Нр┤░ р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "tab_doc": "ЁЯУД р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤ор╡Бр┤│р╡Нр┤│ {sector} р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "tab_gen": "ЁЯзн р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤п {sector} р┤╕р┤╣р┤╛р┤пр┤В",
        "enhanced_analysis_header": "ЁЯУК р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤ор╡Бр┤│р╡Нр┤│ {sector} р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "chat_about_analysis": "ЁЯТм р┤И р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤др╡Нр┤др╡Ж р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "chat_placeholder": "р┤И р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤др╡Нр┤др╡Ж р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Ър╡Лр┤жр╡Нр┤пр┤ор╡Бр┤гр╡Нр┤Яр╡Л...",
        "examples_try": "р┤Зр┤Щр╡Нр┤Щр┤ир╡Ж р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:",
        "gen_help_header": "ЁЯзн р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤п {sector} р┤╕р┤╣р┤╛р┤пр┤╡р╡Бр┤В р┤ир┤┐р╡╝р┤жр╡Зр┤╢р┤╡р╡Бр┤В",
        "gen_help_caption": "{sector_lower} р┤╕р┤Вр┤мр┤ир╡Нр┤зр┤ор┤╛р┤п р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х тАФ р┤╕р┤╣р┤╛р┤пр┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤др┤пр╡Нр┤пр┤╛р┤▒р┤╛р┤гр╡Н!",
        "gen_chat_placeholder": "р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В {sector_lower} р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...",
        "examples_caption": "р┤Йр┤жр┤╛р┤╣р┤░р┤г р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛:",
        "enhanced_features_title": "ЁЯЪА р┤╡р┤┐р┤╢р╡Зр┤╖р┤Чр╡Бр┤гр┤Щр╡Нр┤Щр╡╛:",
        "features_agri_1": "ЁЯМ▒ р┤╡р┤┐р┤│ р┤░р╡Лр┤Чр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "features_agri_2": "ЁЯРЫ р┤Хр╡Ар┤Яр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "features_agri_3": "ЁЯУК р┤Ър┤┐р┤др╡Нр┤░р┤Щр╡Нр┤Щр┤│р┤┐р╡╜ р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤ор┤гр╡Нр┤гр╡Н р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "disclaimer_block_header": "тЪая╕П р┤Ер┤▒р┤┐р┤пр┤┐р┤кр╡Нр┤кр╡Н:",
        "disclaimer_agri": "- р┤Хр┤╛р╡╝р┤╖р┤┐р┤Хр┤В: р┤ир┤┐р╡╝р┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛ р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤пр┤др┤╛р┤гр╡Н тАФ р┤кр╡Нр┤░р┤╛р┤жр╡Зр┤╢р┤┐р┤Х р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤кр┤░р┤┐р┤Чр┤гр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "disclaimer_footer": "- р┤кр╡Нр┤░р┤зр┤╛р┤и р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤Ор┤кр╡Нр┤кр╡Лр┤┤р╡Бр┤В р┤пр╡Лр┤Чр╡Нр┤пр┤ир┤╛р┤п р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤░р╡Бр┤ор┤╛р┤пр┤┐ р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "document": "р┤░р╡Зр┤Ц",
        "analysis_summary": "ЁЯУС р┤╡р┤┐р┤╢р┤Хр┤▓р┤и р┤╕р┤Вр┤Чр╡Нр┤░р┤╣р┤В"
    },
}

def get_text(key: str) -> str:
    lang = st.session_state.get("selected_language", "English")
    return UI_TRANSLATIONS.get(lang, UI_TRANSLATIONS["English"]).get(key, key)

def pick_tts_code(lang_name: str) -> str:
    return LANG_CODE_MAP_TTS.get(lang_name, "en")

# -------------------------------------------------
# CSS Styling
# -------------------------------------------------
PALETTES = {
    "Agriculture":{"brand": "#16A34A", "brand2": "#F59E0B", "bg1": "#DCFCE7", "bg2": "#FEF3C7"},
}
pal = PALETTES["Agriculture"]
st.markdown(f"""
<style>
/* Force readable light scheme and strong foreground */
html {{ color-scheme: light; }}
:root {{
  --brand: {pal["brand"]};
  --brand-2: {pal["brand2"]};
  --bg-grad-1: {pal["bg1"]};
  --bg-grad-2: {pal["bg2"]};
  --text: #0F172A;              /* Dark slate for high contrast */
  --text-weak: #334155;
  --surface: #ffffff;
  --border: #E5E7EB;
}}
/* Background stays colorful but subtle */
.stApp {{
  background:
    radial-gradient(1200px 600px at 10% 0%, var(--bg-grad-1), transparent 60%),
    radial-gradient(1000px 500px at 100% 10%, var(--bg-grad-2), transparent 60%),
    linear-gradient(180deg, #ffffff 0%, #f8fafc 100%);
}}
/* GLOBAL TYPOGRAPHY */
html, body, [class*="css"] {{
  font-family: "Inter","Poppins","Noto Sans","Noto Sans Telugu","Noto Sans Devanagari","Noto Sans Malayalam",
               system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial,"Noto Color Emoji","Apple Color Emoji","Segoe UI Emoji",sans-serif !important;
  color: var(--text);
}}
h1, h2, h3, h4, h5, h6 {{
  color: var(--text) !important;
  font-weight: 700;
}}
/* BUTTONS */
div.stButton > button {{
  background: linear-gradient(135deg, var(--brand), var(--brand-2));
  color: #fff !important;
  border: none; border-radius: 14px;
  padding: 0.9rem 1.1rem;
  box-shadow: 0 8px 24px rgba(0,0,0,.12);
  transition: transform .15s ease, box-shadow .15s ease, filter .2s ease;
}}
div.stButton > button:hover {{
  transform: translateY(-1px);
  box-shadow: 0 12px 30px rgba(0,0,0,.18);
  filter: brightness(1.03);
}}
/* TABS */
.stTabs [role="tab"][aria-selected="true"] {{
  background: linear-gradient(135deg, var(--brand), var(--brand-2));
  color: #fff !important; border-color: transparent !important;
}}
/* TEXT INPUTS */
.stTextInput > div > div input:focus,
.stTextArea > div > textarea:focus {{
  border-color: var(--brand);
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--brand) 25%, transparent);
}}
/* Separate sections subtly */
.hr-soft {{ margin: .8rem 0 1rem 0; border: none; height: 1px;
  background: linear-gradient(90deg, transparent, #e5e7eb, transparent); }}
</style>
""", unsafe_allow_html=True)


# -------------------------------------------------
# AI Helpers
# -------------------------------------------------
def analyze_image_with_ai(image_bytes: bytes, language: str, query: str | None = None) -> str:
    image_part = {"mime_type": "image/jpeg", "data": base64.b64encode(image_bytes).decode('utf-8')}
    prompt = f"You are CropCare. Analyze this agricultural image in {language}: identification, problems, solutions, and prevention."
    try:
        # Pass both prompt and image to the vision model
        response = vision_model.generate_content([prompt, image_part])
        return response.text
    except Exception as e:
        return f"Error analyzing image: {str(e)}"

def get_sector_prompt(mode: str = "summary") -> str:
    prompts = {
        "summary": "You are CropCare ЁЯМ╛, an agricultural document explainer. ONLY analyze agricultural documents.",
        "chat": "You are CropCare ЁЯМ╛, an agricultural assistant. ONLY answer agriculture questions.",
        "general": "You are CropCare ЁЯМ╛, an agricultural guide. ONLY provide farming information."
    }
    return prompts.get(mode, prompts["summary"])

def ask_ai(document_text: str | None = None, query: str | None = None, mode: str = "summary", image_bytes: bytes | None = None) -> str:
    language = st.session_state.selected_language

    if not document_text:
        document_text = st.session_state.get("doc_text", "")

    if image_bytes:
        return analyze_image_with_ai(image_bytes, language, query)

    sector_restriction = "CRITICAL: Provide only agriculture-related information."
    lang_clause = f"Respond ONLY in {language}."
    base_prompt = get_sector_prompt(mode)

    if mode == "summary":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}
Analyze this document in {language}:
- Summary, Key findings, Important recommendations, and Risks
Document:
{document_text}
"""
    elif mode == "chat":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}
Document context:
{document_text}
User question: {query}
"""
    else: # general mode
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}
User question: {query}
"""
    # For text-only tasks, we can use the 'model' object
    response = model.generate_content(prompt, generation_config={"temperature": 0.7, "max_output_tokens": 1500})
    return response.text

# -------------------------------------------------
# TTS
# -------------------------------------------------
def clean_text(text: str) -> str:
    # Removes emojis and markdown for cleaner TTS
    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symbols & pictographs
        u"\U0001F680-\U0001F6FF"  # transport & map symbols
        u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
        u"\U00002700-\U000027BF"
        u"\U0001F900-\U0001F9FF"
        u"\U00002600-\U000026FF"
        u"\U00002B00-\U00002BFF"
        "]+", flags=re.UNICODE)
    text = emoji_pattern.sub(r'', text)
    text = re.sub(r'(\*\*|__|\*|_|#+)', '', text)
    return text.strip()

def tts_speak_toggle(text: str, lang_name: str):
    safe_text = clean_text(text)
    lang_code = pick_tts_code(lang_name)
    try:
        tts = gTTS(text=safe_text, lang=lang_code, slow=False)
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        st.audio(audio_buffer.getvalue(), format='audio/mp3')
    except Exception as e:
        st.error(f"TTS generation failed: {e}")

# -------------------------------------------------
# OCR with Gemini Vision
# -------------------------------------------------
@st.cache_data(show_spinner=False, ttl=3600)
def extract_text_with_gemini_vision(_image_bytes: bytes) -> str:
    """Uses Gemini Vision to extract text from an image."""
    image_part = {"mime_type": "image/jpeg", "data": base64.b64encode(_image_bytes).decode('utf-8')}
    prompt = "Extract all text from this image. Only return the raw text content, with no additional commentary or formatting."
    try:
        response = vision_model.generate_content([prompt, image_part])
        return response.text.strip()
    except Exception as e:
        st.error(f"Gemini Vision OCR failed: {e}")
        return ""

def preprocess_pil(img: Image.Image) -> Image.Image:
    if img.mode != "RGB":
        img = img.convert("RGB")
    return img

# -------------------------------------------------
# Extraction
# -------------------------------------------------
def extract_text_from_pdf(uploaded_file) -> str:
    # First, try standard text extraction
    try:
        uploaded_file.seek(0)
        pdf = PyPDF2.PdfReader(uploaded_file)
        txt = "\n".join((p.extract_text() or "") for p in pdf.pages).strip()
        if len(txt) > 20:
            return txt
    except Exception as e:
        st.warning(f"Standard PDF text extraction failed, trying visual OCR: {e}")

    # Fallback to Gemini Vision OCR for scanned PDFs
    try:
        uploaded_file.seek(0)
        import pdf2image
        images = pdf2image.convert_from_bytes(uploaded_file.read(), dpi=200) # 200 dpi is a good balance
        out = []
        bar = st.progress(0.0, "Visually analyzing PDF pages...")
        for i, im in enumerate(images, 1):
            im = preprocess_pil(im)
            buf = io.BytesIO()
            im.save(buf, format="JPEG")
            page_bytes = buf.getvalue()
            text = extract_text_with_gemini_vision(page_bytes)
            if text:
                out.append(text)
            bar.progress(i/len(images))
        bar.empty()
        return "\n\n--- Page Break ---\n\n".join(out).strip()
    except Exception as e:
        st.error(f"Visual PDF processing failed. Ensure 'poppler' is installed. Error: {e}")
        return ""


def extract_text_from_docx(f):
    try:
        return "\n".join(p.text for p in docx.Document(f).paragraphs).strip()
    except Exception as e:
        st.error(f"DOCX read error: {e}")
        return ""

def extract_text(file):
    if not file: return ""
    ext = file.name.lower().split(".")[-1]
    if ext == "pdf":
        return extract_text_from_pdf(file)
    elif ext == "docx":
        return extract_text_from_docx(file)
    elif ext in ("jpg", "jpeg", "png"):
        # Use Gemini Vision directly for images
        return extract_text_with_gemini_vision(file.getvalue())
    elif ext == "txt":
        return file.read().decode("utf-8", errors="ignore")
    else:
        st.error("Unsupported file type")
        return ""

# -------------------------------------------------
# Examples
# -------------------------------------------------
EXAMPLE_DOC_Q = {
    "Agriculture": {
        "English": ["What disease is this?", "How do I treat this crop issue?", "When should I harvest?"],
        "рд╣рд┐рдВрджреА": ["рдпрд╣ рдХреМрди-рд╕реА рдмреАрдорд╛рд░реА рд╣реИ?", "рдЗрд╕ рдлрд╕рд▓ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рдЗрд▓рд╛рдЬ рдХреИрд╕реЗ рдХрд░реЗрдВ?", "рдХрдЯрд╛рдИ рдХрдм рдХрд░рдиреА рдЪрд╛рд╣рд┐рдП?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░Зр░жр░┐ р░П р░╡р▒Нр░пр░╛р░зр░┐?", "р░И р░кр░Вр░Я р░╕р░ор░╕р▒Нр░пр░ир▒Б р░Ор░▓р░╛ р░кр░░р░┐р░╖р▒Нр░Хр░░р░┐р░Вр░Ър░╛р░▓р░┐?", "р░кр░Вр░Яр░ир▒Б р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Хр▒Лр░пр░╛р░▓р░┐?"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤Зр┤др╡Н р┤Пр┤др╡Н р┤░р╡Лр┤Чр┤ор┤╛р┤гр╡Н?", "р┤И р┤╡р┤┐р┤│ р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤кр┤░р┤┐р┤╣р┤░р┤┐р┤Хр╡Нр┤Хр┤╛р┤В?", "р┤Ор┤кр╡Нр┤кр╡Лр╡╛ р┤Хр╡Кр┤пр╡Нр┤др╡Нр┤др╡Н р┤ир┤Яр┤др╡Нр┤др┤гр┤В?"],
    },
}
EXAMPLE_GEN_Q = {
    "Agriculture": {
        "English": ["Tomato leaves are yellowтАФcause?", "How to identify pest damage?", "Best time to plant corn?"],
        "рд╣рд┐рдВрджреА": ["рдЯрдорд╛рдЯрд░ рдХреЗ рдкрддреНрддреЗ рдкреАрд▓реЗтАФрдХрд╛рд░рдг?", "рдХреАрдЯ рдиреБрдХрд╕рд╛рди рдХреИрд╕реЗ рдкрд╣рдЪрд╛рдиреЗрдВ?", "рдордХреНрдХрд╛ рдмреЛрдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордп?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░Яр░ор▒Лр░Яр░╛ р░Жр░Хр▒Бр░▓р▒Б р░кр░╕р▒Бр░кр▒БтАФр░Хр░╛р░░р░гр░В?", "р░Хр▒Ар░Яр░Хр░╛р░▓ р░ир░╖р▒Нр░Яр░В р░Ор░▓р░╛ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░╛р░▓р░┐?", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░ир░╛р░Яр░╛р░▓р░┐?"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐ р┤Зр┤▓р┤Хр╡╛ р┤ор┤Юр╡Нр┤ЮтАФр┤Хр┤╛р┤░р┤гр┤В?", "р┤Хр╡Ар┤Яр┤ир┤╛р┤╢р┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр┤╛р┤В?", "р┤ор┤Хр╡Нр┤Х р┤Ър╡Лр┤│р┤В р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр┤╛р╡╗ р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╕р┤ор┤пр┤В?"],
    },
}

# -------------------------------------------------
# Language Selection
# -------------------------------------------------
def show_language_selection():
    st.markdown(f"<h1 style='text-align:center;'>{get_text('select_language')}</h1>", unsafe_allow_html=True)
    st.markdown(f"<p style='text-align:center; font-size:18px; margin-bottom:24px;'>{get_text('choose_language')}</p>", unsafe_allow_html=True)
    st.markdown("<hr class='hr-soft'/>", unsafe_allow_html=True)

    cols = st.columns(4)
    lang_map = list(LANGUAGES.items())

    for i, col in enumerate(cols):
        with col:
            lang_name, lang_emoji = lang_map[i]
            if st.button(f"{lang_emoji} {lang_name}", use_container_width=True):
                st.session_state.selected_language = lang_name
                st.session_state.language_selected = True
                st.rerun()

# -------------------------------------------------
# Main App
# -------------------------------------------------
def show_main_app():
    st.title(f"ЁЯМ╛ CropCare{get_text('enhanced_title_suffix')}")

    lang = st.session_state.selected_language
    st.info(get_text("info_agri").format(lang_flag=LANGUAGES[lang], lang=lang))

    with st.sidebar:
        st.subheader(get_text("settings"))
        if st.button(get_text("change_lang_sector"), use_container_width=True):
            # Reset state to go back to language selection
            for k in list(st.session_state.keys()):
                if k in DEFAULT_STATE: st.session_state[k] = DEFAULT_STATE[k]
            st.rerun()

        st.markdown("---")
        st.caption(f"{get_text('current')}: {lang} тЖТ {sector_label('Agriculture')}")
        st.markdown(f"### {get_text('enhanced_features_title')}")
        st.markdown(f"- {get_text('features_agri_1')}")
        st.markdown(f"- {get_text('features_agri_2')}")
        st.markdown(f"- {get_text('features_agri_3')}")

    tab_doc, tab_gen = st.tabs([
        get_text("tab_doc").format(sector=sector_label('Agriculture')),
        get_text("tab_gen").format(sector=sector_label('Agriculture'))
    ])

    with tab_doc:
        st.header(get_text("tab_doc").format(sector=sector_label('Agriculture')))
        up = st.file_uploader(get_text("uploader_any"), type=["pdf", "docx", "txt", "jpg", "jpeg", "png"])

        if up:
            file_extension = up.name.lower().split(".")[-1]
            is_image = file_extension in ("jpg", "jpeg", "png")

            if is_image:
                st.subheader(get_text("image_analysis_header"))
                st.image(up, caption=get_text("uploaded_image_caption").format(sector=sector_label('Agriculture')), use_column_width=True)
                with st.spinner(get_text("analyzing_image")):
                    st.session_state.summary = ask_ai(mode="summary", image_bytes=up.getvalue())
                with st.spinner(get_text("extracting_image_text")):
                    st.session_state.doc_text = extract_text(up) # This will use Gemini Vision
            else: # Document
                with st.spinner(get_text("extracting")):
                    text = extract_text(up)
                if text:
                    st.session_state.doc_text = text
                    with st.spinner(get_text("generating")):
                        st.session_state.summary = ask_ai(document_text=text, mode="summary")
                else:
                    st.warning(get_text("no_text"))

        if st.session_state.summary:
            st.subheader(get_text("enhanced_analysis_header").format(sector=sector_label('Agriculture')))
            st.write(st.session_state.summary)
            tts_speak_toggle(st.session_state.summary, st.session_state.selected_language)
            st.divider()

            st.subheader(get_text("chat_about_analysis"))
            for m in st.session_state.chat_history:
                with st.chat_message(m["role"]):
                    st.markdown(m["content"])

            try_examples = EXAMPLE_DOC_Q["Agriculture"].get(st.session_state.selected_language, [])
            st.caption(f"{get_text('examples_try')} {' тАв '.join(try_examples)}")

            q = st.chat_input(get_text("chat_placeholder"))
            if q:
                st.session_state.chat_history.append({"role": "user", "content": q})
                with st.spinner(get_text("thinking")):
                    ans = ask_ai(query=q, mode="chat")
                st.session_state.chat_history.append({"role": "assistant", "content": ans})
                st.rerun()

    with tab_gen:
        st.header(get_text("gen_help_header").format(sector=sector_label('Agriculture')))
        st.caption(get_text("gen_help_caption").format(sector_lower=sector_label('Agriculture').lower()))
        for m in st.session_state.general_messages:
            with st.chat_message(m["role"]):
                st.markdown(m["content"])

        try_examples2 = EXAMPLE_GEN_Q["Agriculture"].get(st.session_state.selected_language, [])
        st.caption(f"{get_text('examples_caption')} {' тАв '.join(try_examples2)}")

        q2 = st.chat_input(get_text("gen_chat_placeholder").format(sector_lower=sector_label('Agriculture').lower()))
        if q2:
            st.session_state.general_messages.append({"role": "user", "content": q2})
            with st.spinner(get_text("thinking")):
                ans2 = ask_ai(query=q2, mode="general")
            st.session_state.general_messages.append({"role": "assistant", "content": ans2})
            st.rerun()

    # Disclaimer
    st.markdown(f"---\n**{get_text('disclaimer_block_header')}**\n{get_text('disclaimer_agri')}\n\n{get_text('disclaimer_footer')}")

# -------------------------------------------------
# Main
# -------------------------------------------------
def main():
    if not st.session_state.language_selected:
        show_language_selection()
    else:
        st.session_state.selected_sector = "Agriculture"
        st.session_state.sector_selected = True
        show_main_app()

if __name__ == "__main__":
    main()